---
- name: Sets eth0 to bind
  set_fact:
    ethernet: ansible_eth0
  when: consul.iface == "eth0"

- name: Sets eth1 to bind
  set_fact:
    ethernet: ansible_eth1
  when: consul.iface == "eth1"

- name: Sets Consul arch -> linux_amd64
  set_fact:
    arch: linux_amd64
  when: ansible_system == "Linux"

- name: Sets Consul arch -> darwin_amd64
  set_fact:
    arch: darwin_amd64
  when: ansible_system == "Darwin"

- name: Setup dnsmasq config file
  template:
    src="../templates/dnsmasq-10-consul.j2"
    dest="{{ dnsmasq.config_file }}"
  sudo: yes

- name: Ensure consul group exists
  group:
    name=consul
    state=present
  sudo: yes

- name: Ensure consul user exists
  user:
    name="consul"
    groups="consul,syslog"
    uid="1050"
    generate_ssh_key=true
    ssh_key_bits=2048
    ssh_key_file=".ssh/id_rsa"
  sudo: yes

- name: Creates configuration directories
  file:
    path="{{ item }}"
    owner={{ consul.user | default('root') }}
    group={{ consul.user  | default('staff') }}
    mode=755
    state=directory
  sudo: yes
  with_items:
    - "{{ consul.dirs }}"

- name: Downloads UI
  get_url: >
    url="{{ item.url }}"
    dest="{{ item.dest }}"
    mode=0755
    force="{{ consul.install.force_download }}"
    validate_certs=no
  when: "'consul-servers' in {{ group_names }}"
  sudo: yes

  with_items:
    - {"url" : "{{ consul.install.download_location }}/{{ consul.version }}/consul_{{ consul.version }}_web_ui.zip" , "dest": "/var/consul/consul_{{ consul.version }}_web_ui.zip" }

- name: Unpacks to location
  unarchive: >
    src="{{ item.url }}"
    dest="{{ item.dest }}"
    copy=no
    mode=755
    creates=yes
  when: "'consul-servers' in {{ group_names }}"
  sudo: yes

  with_items:
    - { "url" : "/var/consul/consul_{{ consul.version }}_web_ui.zip", "dest" : "/var/consul/ui_src" }

- name: Symlinks ui
  file:
    src="/var/consul/ui_src"
    dest="{{ consul.ui_dir }}"
    state=link
    force=yes
  when: "'consul-servers' in {{ group_names }}"
  sudo: yes


- name: Fix permissions on files (Workaround while waiting for 2.0)
  file: path="{{ consul.install.dir }}/{{ item }}"
    owner="{{ consul.user | default('root') }}"
    group="{{ consul.user | default('staff') }}"
    mode=755
  sudo: yes
  with_items:
    - "{{ consul.install.file_list }}"

- name: Fix permissions on dirs (Workaround while waiting for 2.0)
  file: path="{{ consul.install.dir }}/{{ item }}"
    owner="{{ consul.user | default('root') }}"
    group="{{ consul.user | default('staff') }}"
    mode=755
    recurse=true
    state=directory
  when: "'consul-servers' in {{ group_names }}"
  sudo: yes
  with_items:
    - "{{ consul.ui_dir }}"

- name: Setup consul config @ bootstrap box
  when: "'consul-bootstrap' in {{ group_names }}"
  template:
    src="../templates/consul-bootstrap.json.j2"
    dest="{{ consul.config.dir }}/config.json"
    force=yes
    owner={{ consul.user }}
    group={{ consul.group }}
  sudo: yes
  register: bootstrap_obj

- name: Setup consul config @  server boxes
  when: "'consul-servers' in {{ group_names }} and 'consul-bootstrap' not in {{ group_names }}"
  template:
    src="../templates/consul-server.json.j2"
    dest="{{ consul.config.dir }}/config.json"
    force=yes
    owner={{ consul.user }}
    group={{ consul.group }}
  sudo: yes

- name: Setup consul config @ client boxes
  when: "'consul-clients' in {{ group_names }}"
  template:
    src="../templates/consul-client.json.j2"
    dest="{{ consul.config.dir }}/config.json"
    force=yes
    group={{ consul.group }}
    owner={{ consul.user }}
  sudo: yes


- name: Setup consul service config file
  template:
    src="../templates/consul.conf.j2"
    dest="{{ consul.config.service_file }}"
    owner=root
    group=root
  sudo: yes

- name: Setup dnsmasq and consul as service
  service:
    name="{{ item }}"
    state=started
  sudo: yes
  with_items:
    - dnsmasq
    - consul

- name: Adds NGINX Virtual host
  template:
    src="../templates/nginx-consul.j2"
    dest="/etc/nginx/sites-available/consul"
    force=yes
  when: "'consul-servers' in {{ group_names }}"
  sudo: yes

- name: Enable Consul VHost
  file:
    src="/etc/nginx/sites-available/consul"
    dest="/etc/nginx/sites-enabled/consul"
    state=link
    force=yes
  when: "'consul-servers' in {{ group_names }}"
  sudo: yes

- name: Restart consul boostrap
  service: name=consul state=restarted
  when: "'consul-bootstrap' in {{ group_names }}"

- name: Restart consul servers and clients
  service: name=consul state=restarted
  when: "'consul-bootstrap' not in {{ group_names }}"

- name: Restart Nginx
  service: name=nginx state=restarted
